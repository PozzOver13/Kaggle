require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
data_sources = list.files(path = paste0(path_datasets, "raccordi"),
pattern="*.rda",
full.names = T)
file_sources = list.files(path = path_pgm,
pattern="*.R",
full.names = T)
sapply(data_sources,load,.GlobalEnv)
sapply(file_sources,source,.GlobalEnv)
#### CARICAMENTO DATI ####
load(paste0(path_datasets, "10R_PSD2_BNL_output_simulazione_MC.rdata"))
risultati = dt_PD_cumulato %>% dplyr::filter(FLAG_CALC_PD=="CALCOLATO") %>% mutate(STATUS_01 =if_else(STATUS=="Bonis",0,1))
View(risultati)
risultati = dt_PD_cumulato %>% dplyr::filter(FLAG_CALC_PD=="CALCOLATO") %>% mutate(STATUS_01 =if_else(STATUS=="Bonis",0,1))
gplot(risultati, aes(x=PD_PRIMA_AUTO_1, fill=STATUS)) +
geom_density( alpha=0.3)
risultati = dt_PD_cumulato %>% dplyr::filter(FLAG_CALC_PD=="CALCOLATO") %>% mutate(STATUS_01 =if_else(STATUS=="Bonis",0,1))
ggplot(risultati, aes(x=PD_PRIMA_AUTO_1, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_AUTO_3, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_AUTO_4, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_AUTO_5, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_AUTO_6, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_LIQ_1, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_LIQ_3, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_LIQ_4, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_LIQ_5, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_PRIMA_LIQ_6, fill=STATUS)) +
geom_density( alpha=0.3)
ggplot(risultati, aes(x=PD_EUF_SALDO_ACC_6, fill=STATUS)) +
geom_density( alpha=0.3)
risultati = dt_PD_cumulato %>% dplyr::filter(FLAG_CALC_PD=="CALCOLATO") %>% mutate(STATUS_01 =if_else(STATUS=="Bonis",0,1))
ggplot(risultati, aes(x=PD_PRIMA_AUTO_1, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_3, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_4, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_5, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_6, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_1, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_3, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_4, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_5, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_6, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_EUF_SALDO_ACC_6, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
risultati = dt_PD_cumulato %>%
dplyr::filter(FLAG_CALC_PD=="CALCOLATO") %>%
mutate(STATUS_01 =if_else(STATUS=="Bonis",0,1))
ggplot(risultati, aes(x=PD_PRIMA_AUTO_1, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_3, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_4, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_5, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_AUTO_6, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_1, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_3, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_4, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_5, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_PRIMA_LIQ_6, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati, aes(x=PD_EUF_SALDO_ACC_6, fill=STATUS)) +
geom_density( alpha=0.3) +
theme_bw()
ggplot(risultati,
aes(x=PD_EUF_BASE_6,y=PD_EUF_SALDO_ACC_6, color=STATUS)) +
geom_point()
ggplot(risultati,
aes(x=PD_EUF_SALDO_6,y=PD_EUF_SALDO_ACC_6, color=STATUS)) +
geom_point()
ggplot(risultati,
aes(x=PD_EUF_SALDO_ACC_1,y=PD_EUF_SALDO_ACC_6, color=STATUS)) +
geom_point()
PDs = names(risultati)[grep("PD",names(risultati))]
PDs
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 10R_BNL_PSD2_data_quality_simulazione_monte_carlo.R
# DATA:      25/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
#### INIZIALIZZAZIONE ####
require(tidyverse)
require(readxl)
require(data.table)
require(lubridate)
require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
#### DATA QUALITY ####
rmarkdown::render(paste0(path_elab, "10R_PSD2_BNL_data_quality_simulazione_MC_SIM20170101.Rmd"),
params = list(directory = path_datasets,
directory_elab = path_elab,
directory_fct = path_pgm,
file = "10R_PSD2_BNL_output_simulazione_MC.rdata"))
rmarkdown::render(paste0(path_elab, "10R_PSD2_BNL_data_quality_simulazione_MC_SIM20170101.Rmd"),
params = list(directory = path_datasets,
directory_elab = path_elab,
directory_fct = path_pgm,
file = "10R_PSD2_BNL_output_simulazione_MC.rdata"))
rmarkdown::render(paste0(path_elab, "10R_PSD2_BNL_data_quality_simulazione_MC_SIM20170101.Rmd"),
params = list(directory = path_datasets,
directory_elab = path_elab,
directory_fct = path_pgm,
file = "10R_PSD2_BNL_output_simulazione_MC.rdata"))
dt_PD_cumulato %>%
mutate(STATUS_01 =if_else(STATUS=="Bonis",0,1)) %>%
group_by(FLAG_CALC_PD) %>%
summarise(N_obs = n(),
default = sum(STATUS_01),
td = default / N_obs)
rmarkdown::render(paste0(path_elab, "10R_PSD2_BNL_data_quality_simulazione_MC_SIM20170101.Rmd"),
params = list(directory = path_datasets,
directory_elab = path_elab,
directory_fct = path_pgm,
file = "10R_PSD2_BNL_output_simulazione_MC.rdata"))
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 10R_BNL_PSD2_simulazione_monte_carlo.R
# DATA:      25/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
#### INIZIALIZZAZIONE ####
require(tidyverse)
require(readxl)
require(data.table)
require(lubridate)
require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
data_sources = list.files(path = paste0(path_datasets, "raccordi"),
pattern="*.rda",
full.names = T)
file_sources = list.files(path = path_pgm,
pattern="*.R",
full.names = T)
sapply(data_sources,load,.GlobalEnv)
sapply(file_sources,source,.GlobalEnv)
#### CARICAMENTO DATI ####
load(paste0(path_datasets, "09R_PSD2_BNL_dataset_training.rdata"))
# filtro per data scoring 12-2016
df_bnl_clean_122016 <- df_bnl_clean %>%
mutate(filtro_122016 = ifelse(substr(DATA_SCORING, 1, 7) == "2017-01", 1, 0)) %>%
filter(filtro_122016 == 1) %>%
rename(CHIAVE_FINALE = INQUIRY_COD_STD)
table(df_bnl_clean_122016$DATA_SCORING)
id_univ <- unique(df_bnl_clean_122016$CHIAVE_FINALE)
length(id_univ)
View(lancia_simulazione_MC)
View(df_bnl_clean_122016)
View(prepara_input_sim_MC_ext)
names(df_bnl_clean_122016)
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 10R_BNL_PSD2_simulazione_monte_carlo.R
# DATA:      25/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
#### INIZIALIZZAZIONE ####
require(tidyverse)
require(readxl)
require(data.table)
require(lubridate)
require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
data_sources = list.files(path = paste0(path_datasets, "raccordi"),
pattern="*.rda",
full.names = T)
file_sources = list.files(path = path_pgm,
pattern="*.R",
full.names = T)
sapply(data_sources,load,.GlobalEnv)
sapply(file_sources,source,.GlobalEnv)
#### CARICAMENTO DATI ####
load(paste0(path_datasets, "09R_PSD2_BNL_dataset_training.rdata"))
# filtro per data scoring 12-2016
df_bnl_clean_122016 <- df_bnl_clean %>%
mutate(filtro_122016 = ifelse(substr(DATA_SCORING, 1, 7) == "2017-01", 1, 0)) %>%
filter(filtro_122016 == 1) %>%
rename(CHIAVE_FINALE = INQUIRY_COD_STD)
table(df_bnl_clean_122016$DATA_SCORING)
id_univ <- unique(df_bnl_clean_122016$CHIAVE_FINALE)
length(id_univ)
i <- 1
start_time <- Sys.time()
start_time1 <- Sys.time()
## Costruisco input simulazione Monte Carlo
DB <- prepara_input_sim_MC_ext(df_in = df_bnl_clean_122016)
end_time1 <- Sys.time() - start_time1
test = DB$V_info_out
View(test)
test_ = test %>% mutate_all(funs(ifelse(is.infinite(.), 0, .)))
View(test_)
View(prepara_dataset)
View(prepara_input_sim_MC)
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 10R_BNL_PSD2_simulazione_monte_carlo.R
# DATA:      25/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
#### INIZIALIZZAZIONE ####
require(tidyverse)
require(readxl)
require(data.table)
require(lubridate)
require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
data_sources = list.files(path = paste0(path_datasets, "raccordi"),
pattern="*.rda",
full.names = T)
file_sources = list.files(path = path_pgm,
pattern="*.R",
full.names = T)
sapply(data_sources,load,.GlobalEnv)
sapply(file_sources,source,.GlobalEnv)
#### CARICAMENTO DATI ####
load(paste0(path_datasets, "09R_PSD2_BNL_dataset_training.rdata"))
# filtro per data scoring 12-2016
df_bnl_clean_122016 <- df_bnl_clean %>%
mutate(filtro_122016 = ifelse(substr(DATA_SCORING, 1, 7) == "2017-01", 1, 0)) %>%
filter(filtro_122016 == 1) %>%
rename(CHIAVE_FINALE = INQUIRY_COD_STD)
table(df_bnl_clean_122016$DATA_SCORING)
id_univ <- unique(df_bnl_clean_122016$CHIAVE_FINALE)
length(id_univ)
i <- 1
start_time <- Sys.time()
start_time1 <- Sys.time()
## Costruisco input simulazione Monte Carlo
DB <- prepara_input_sim_MC_ext(df_in = df_bnl_clean_122016)
end_time1 <- Sys.time() - start_time1
## Lancio Simulazione
start_time2 <- Sys.time()
for (i in 1:length(id_univ)) {
dset_pd_tot <- lancia_simulazione_MC(list_out = DB,
id_sample = id_univ[i],
id_ciclo = i,
rata = 1000,
nAnni = 1,   # simulazione 12 mesi per volta
nSim = 1000)
if (i==1) {
dt_PD_cumulato <- dset_pd_tot
}  else {
dt_PD_cumulato=rbind(dt_PD_cumulato, dset_pd_tot)
}
}
end_time2 <- Sys.time() - start_time2
end_time <- Sys.time() - start_time
dim_set = dim(dt_PD_cumulato)[1]
round(table(dt_PD_cumulato$FLAG_CALC_PD) / dim_set, 3)
round(table(dt_PD_cumulato$STATUS) / dim_set, 3)
save(dt_PD_cumulato,
file = paste0(path_datasets, "10R_PSD2_BNL_output_simulazione_MC.rdata"))
end_time1
end_time2
end_time
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 10R_BNL_PSD2_data_quality_simulazione_monte_carlo.R
# DATA:      25/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
#### INIZIALIZZAZIONE ####
require(tidyverse)
require(readxl)
require(data.table)
require(lubridate)
require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
#### DATA QUALITY ####
rmarkdown::render(paste0(path_elab, "10R_PSD2_BNL_data_quality_simulazione_MC_SIM20170101.Rmd"),
params = list(directory = path_datasets,
directory_elab = path_elab,
directory_fct = path_pgm,
file = "10R_PSD2_BNL_output_simulazione_MC.rdata"))
View(dt_PD_cumulato)
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 10R_BNL_PSD2_simulazione_monte_carlo.R
# DATA:      25/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
#### INIZIALIZZAZIONE ####
require(tidyverse)
require(readxl)
require(data.table)
require(lubridate)
require(ks) #cuore del metodo
require(moments)
path_input = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datainput/"
path_datasets = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/datasets/"
path_pgm = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/prog/functions/"
path_elab = "C:/Users/cg08900/Documents/Pandora/Dati/BNL/elaborazioni/"
data_sources = list.files(path = paste0(path_datasets, "raccordi"),
pattern="*.rda",
full.names = T)
file_sources = list.files(path = path_pgm,
pattern="*.R",
full.names = T)
sapply(data_sources,load,.GlobalEnv)
sapply(file_sources,source,.GlobalEnv)
#### CARICAMENTO DATI ####
load(paste0(path_datasets, "09R_PSD2_BNL_dataset_training.rdata"))
# filtro per data scoring 12-2016
df_bnl_clean_122016 <- df_bnl_clean %>%
mutate(filtro_122016 = ifelse(substr(DATA_SCORING, 1, 7) == "2017-01", 1, 0)) %>%
filter(filtro_122016 == 1) %>%
rename(CHIAVE_FINALE = INQUIRY_COD_STD)
table(df_bnl_clean_122016$DATA_SCORING)
id_univ <- unique(df_bnl_clean_122016$CHIAVE_FINALE)
length(id_univ)
i <- 1
start_time <- Sys.time()
start_time1 <- Sys.time()
## Costruisco input simulazione Monte Carlo
DB <- prepara_input_sim_MC_ext(df_in = df_bnl_clean_122016)
end_time1 <- Sys.time() - start_time1
View(lancia_simulazione_MC)
list_out = DB;
id_sample = "50780841";
id_ciclo = 1;
rata = 1000;
nAnni = 1; # simulazione 12 mesi per volta
nSim = 1000
## Estraggo info da oggetto output
# Selezione modelli
V1 <- list_out$V_out[versione == "v1" & CHIAVE_FINALE == id_sample]
V2 <- list_out$V_out[versione == "v2" & CHIAVE_FINALE == id_sample]
V3 <- list_out$V_out[versione == "v3" & CHIAVE_FINALE == id_sample]
V4 <- list_out$V_out[versione == "v4" & CHIAVE_FINALE == id_sample]
V5 <- list_out$V_out[versione == "v5" & CHIAVE_FINALE == id_sample]
V6 <- list_out$V_out[versione == "v6" & CHIAVE_FINALE == id_sample]
V7 <- list_out$V_out[versione == "v7" & CHIAVE_FINALE == id_sample]
V8 <- list_out$V_out[versione == "v8" & CHIAVE_FINALE == id_sample]
View(V1)
View(V5)
#### CARICAMENTO DATI INPUT ####
load(paste0(path_datasets, "02R_BNL_dataset_raccordo_default.rdata"))
df_bnl_clean %>%
filter(INQUIRY_CODE_STD == "50780841") %>% View()
df_bnl_clean %>%
filter(INQUIRY_COD_STD == "50780841") %>% View()
df_bnl_clean %>%
filter(INQUIRY_COD_STD == "50780841") %>% View()
df_in_racc %>%
filter(INQUIRY_COD_STD == "50780841") %>% View()
df_in_racc %>%
filter(inquiry_cod_std == "50780841") %>% View()
# Applico funzione
load(paste0(path_datasets, "02R_BNL_1_dataset_completo.rdata"))
df_in_racc %>%
filter(inquiry_cod_std == "50780841") %>%
select(NDG)
df_in_racc %>%
filter(inquiry_cod_std == "50780841") %>%
dplyr::select(NDG)
mov_dic = bnl_1 %>%
filter(NDG_TITLR_EFFTVO_RAPP == 2384645)
View(mov_dic)
mod_dic_ord = mov_dic %>% arrange(desc(abs(IMP_MOV_EURO)))
mov_dic_ord = mov_dic %>% arrange(desc(abs(IMP_MOV_EURO)))
View(mov_dic_ord)
df_in_racc %>% filter(Flag_Nuova_Finanza == 1) %>% head()
df_in_racc %>%
filter(inquiry_cod_std == "46186708") %>%
dplyr::select(NDG)
mov_dic = bnl_1 %>%
filter(NDG_TITLR_EFFTVO_RAPP == 10003796)
View(mov_dic)
mov_dic_ord = mov_dic %>% arrange(desc(abs(IMP_MOV_EURO)))
View(mod_dic_ord)
View(mov_dic_ord)
list_out = DB;
id_sample ="46186708";
id_ciclo = 1;
rata = 1000;
nAnni = 1; # simulazione 12 mesi per volta
nSim = 1000
## Estraggo info da oggetto output
# Selezione modelli
V1 <- list_out$V_out[versione == "v1" & CHIAVE_FINALE == id_sample]
V2 <- list_out$V_out[versione == "v2" & CHIAVE_FINALE == id_sample]
V3 <- list_out$V_out[versione == "v3" & CHIAVE_FINALE == id_sample]
V4 <- list_out$V_out[versione == "v4" & CHIAVE_FINALE == id_sample]
V5 <- list_out$V_out[versione == "v5" & CHIAVE_FINALE == id_sample]
V6 <- list_out$V_out[versione == "v6" & CHIAVE_FINALE == id_sample]
V7 <- list_out$V_out[versione == "v7" & CHIAVE_FINALE == id_sample]
V8 <- list_out$V_out[versione == "v8" & CHIAVE_FINALE == id_sample]
# Info aggiuntive
df_info <- list_out$V_info_out[CHIAVE_FINALE == id_sample]
id_status = df_info$id_status
id_saldo_inizio_serie_storica = df_info$id_saldo_inizio_serie_storica
id_saldo_inizio_simulazione = df_info$id_saldo_inizio_simulazione
nRapp_proxy = df_info$nRapp_proxy
min_AAMM = df_info$min_AAMM # da quando iniziano i C/C forniti
max_AAMM = df_info$max_AAMM # quando finisconoi C/C forinti.
View(V5)
View(V1)
View(prepara_input_sim_MC_ext)
View(ABI_GT_update_bnl)
bnl_1 %>% group_by(COD_CAU_ABI) %>% summarise(N =n())
testami <- bnl_1 %>% group_by(COD_CAU_ABI) %>% summarise(N =n())
View(testami)
test2 <- bnl %>%
filter(COD_CAU_ABI == "Z1")
test2 <- bnl_1 %>%
filter(COD_CAU_ABI == "Z1")
View(test2)
View(testami)
test2 <- bnl_1 %>%
filter(COD_CAU_ABI %in% testami$COD_CAU_ABI[62:78])
View(test2)
test2 <- bnl_1 %>%
filter(COD_CAU_ABI %in% testami$COD_CAU_ABI[62:78]) %>%
mutate(lubridate::dmy(str_replace_all(substr(COD_ID_OPE, 1, 10), "\\.", "-")))
test2 <- bnl_1 %>%
filter(COD_CAU_ABI %in% testami$COD_CAU_ABI[62:78]) %>%
mutate(lubridate::dmy(str_replace_all(substr(COD_ID_OPE, 1, 10), "\\.", "-"))) %>%
filter(is.na(DATA))
test2 <- bnl_1 %>%
filter(COD_CAU_ABI %in% testami$COD_CAU_ABI[62:78]) %>%
mutate(DATA =
lubridate::dmy(str_replace_all(substr(COD_ID_OPE, 1, 10), "\\.", "-"))) %>%
filter(is.na(DATA))
View(test2)
View(testami)
View(test2)
test2 <- bnl_1 %>%
filter(COD_CAU_ABI == "Z1")
View(test2)
#--------------------------------------------------------------------------------------------------------#
# PROGRAMMA: 02R_BNL_PSD2_data quality.R
# DATA:      17/01/2019
# NOTE:
#--------------------------------------------------------------------------------------------------------#
rm(list=ls())
for (i in 1:10) gc()
